name: Build and Release Windows Executable

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Create Windows requirements file
      run: |
        python -c "
        with open('requirements.txt', 'r') as f:
            lines = f.readlines()
        with open('requirements-windows.txt', 'w') as f:
            for line in lines:
                if 'PyQt5-Qt5==' not in line:
                    f.write(line)
        "
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements-windows.txt
            
    - name: Build with PyInstaller
      run: |
        pyinstaller podium-windows.spec
    
    # Criar certificado auto-assinado (apenas para testes)
    - name: Create Self-Signed Certificate
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      run: |
        $cert = New-SelfSignedCertificate -Subject "CN=Podium Application, O=Your Organization" -Type CodeSigning -CertStoreLocation Cert:\CurrentUser\My
        $CertPassword = ConvertTo-SecureString -String "YourPassword" -Force -AsPlainText
        $CertPath = "$env:RUNNER_TEMP\PodiumCert.pfx"
        Export-PfxCertificate -Cert "Cert:\CurrentUser\My\$($cert.Thumbprint)" -FilePath $CertPath -Password $CertPassword
        echo "CERT_PATH=$CertPath" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "CERT_PASSWORD=YourPassword" | Out-File -FilePath $env:GITHUB_ENV -Append
    
    # Assinar o executável usando o SignTool do Windows SDK
    - name: Sign Executable
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      run: |
        # Localizar o SignTool no Windows SDK
        $SignTool = Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin\*\x64\signtool.exe" | Sort-Object -Property FullName -Descending | Select-Object -First 1
        
        if (-not $SignTool) {
            Write-Error "SignTool não encontrado!"
            exit 1
        }
        
        Write-Host "Usando SignTool em: $($SignTool.FullName)"
        
        # Assinar o executável
        & $SignTool.FullName sign /f "$env:CERT_PATH" /p "$env:CERT_PASSWORD" /t http://timestamp.digicert.com /d "Podium - Sistema de Classificação para Monitoria" /du "https://github.com/${{ github.repository }}" "dist\Podium.exe"
    
    # Criar arquivo ZIP com o executável para a release
    - name: Create ZIP archive
      run: |
        cd dist
        powershell Compress-Archive -Path "Podium.exe" -DestinationPath "Podium_Windows.zip"
    
    # Criar a release e fazer upload do ZIP
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        name: Podium ${{ github.ref_name }}
        files: |
          dist/Podium_Windows.zip
        body: |
          # Podium - Sistema de Classificação para Monitoria
          
          Versão ${{ github.ref_name }}
          
          ## Download:
          - [Windows Executable](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Podium_Windows.zip)